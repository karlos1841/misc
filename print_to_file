#!/usr/bin/python

import sys
import getopt
import subprocess
import os.path
import time

def print_help(DEFAULT_VALS):
	print('''Execute command and store its output to a file.

Available options:
-H	hostname of the machine where command is to be executed
-s	string or file that contains command along with its arguments
-d	directory to store generated files(DEFAULT: %s)
-n	filename where output of the command is stored

Read a generated file

Available options:
-H	hostname of the machine
-S	service description
-d	directory to read(DEFAULT: %s)
-f	freshness(DEFAULT: %i min)
	''' % (DEFAULT_VALS[0], DEFAULT_VALS[0], DEFAULT_VALS[1]))
	sys.exit(0)

def write_output(HOSTNAME, COMMAND, DIRNAME, FILENAME):
	if DIRNAME[-1] != '/':
		path_to_dir = str(DIRNAME) + '/' + str(HOSTNAME)
	else:
		path_to_dir = str(DIRNAME) + str(HOSTNAME)

	FILENAME = FILENAME.replace('/', '')
	if FILENAME[-1] == ' ':
		FILENAME = FILENAME[:-1]

	path_to_file = path_to_dir + '/' + FILENAME
	run_cmd('mkdir -p ' + path_to_dir)

	STATUS = run_cmd(COMMAND)
	ofile = open(path_to_file, 'w+')
	if STATUS[2]:
		ofile.write(STATUS[2])
	else:
		ofile.write(STATUS[1])

	ofile.write('\n')
	ofile.write(str(STATUS[0]))
	ofile.close()

	return STATUS

def readfile(HOSTNAME, SERVICEDESC, FRESHNESS, DIRNAME):
	if DIRNAME[-1] != '/':
		path_to_dir = str(DIRNAME) + '/' + str(HOSTNAME)
	else:
		path_to_dir = str(DIRNAME) + str(HOSTNAME)

	all_files = os.listdir(path_to_dir)

	SERVICEDESC = SERVICEDESC.replace('/', '')
	if SERVICEDESC[-1] == ' ':
		SERVICEDESC = SERVICEDESC[:-1]
	if SERVICEDESC in all_files:
		path_to_file = path_to_dir + '/' + SERVICEDESC
	else:
		print("Error: " + SERVICEDESC + " not found")
		sys.exit(2)

	if not os.path.isfile(path_to_file):
		print("Error: File " + path_to_file + " does not exist")
		exit_code = 2
	else:
		file_mod = os.path.getmtime(path_to_file)
		now = time.time()
		last_check = now - 60*int(FRESHNESS)
		if file_mod < last_check:
			print("Error: op5 old result on TSR filesystem")
			exit_code = 2
		else:
			ifile = open(path_to_file, 'r')
			content = ifile.readlines()
			ifile.close()
			for i in content[:-1]:
				sys.stdout.write(str(i))
			exit_code = content[-1]

	return exit_code

def run_cmd(CMD):
	proc = subprocess.Popen(CMD, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
	stdout, stderr = proc.communicate()
	if proc.returncode != 0:
		output = [proc.returncode, stdout, stderr]
		return output
	output = [0, stdout, '']
	return output

def cleanup(path_to_file):
	run_cmd('rm -f ' + path_to_file)

def printing(DIRNAME):
	try:
		opts, args = getopt.getopt(sys.argv[1:], 'H:s:d:n:')
	except getopt.GetoptError as err:
		print("Error: " + str(err))
		sys.exit(2)
	if not opts:
		print("Error: no option given")
		print("Type " + sys.argv[0] + " --help to print help")
		sys.exit(2)

	try:
		for opt, arg in opts:
			if opt == '-H':
				HOSTNAME = arg
			elif opt == '-s':
				if os.path.isfile(arg):
					with open(arg, "r") as tmpfile:
						COMMAND = tmpfile.read()
					COMMAND = COMMAND.replace('$HOSTNAME$', HOSTNAME, 1) # Replacing $HOSTNAME$ with an actual hostname
				else:
					COMMAND = arg
			elif opt == '-d':
				DIRNAME = arg
			elif opt == '-n':
				FILENAME = arg
			else:
				print("Error: Unhandled option")
				print("Type " + sys.argv[0] + " --help to print help")
				sys.exit(2)

		RETURN_STATUS = write_output(HOSTNAME, COMMAND, DIRNAME, FILENAME)
		sys.stdout.write(RETURN_STATUS[1])
		sys.exit(RETURN_STATUS[0])
	except NameError:
		print("Error: Some of the options were not defined")
		print("Type " + sys.argv[0] + " --help to print help")
		sys.exit(2)

def reading(DIRNAME, FRESHNESS):
	try:
		opts, args = getopt.getopt(sys.argv[1:], 'H:S:f:d:')
	except getopt.GetoptError as err:
		print("Error: " + str(err))
		sys.exit(2)
	if not opts:
		print("Error: no option given")
		print("Type " + sys.argv[0] + " --help to print help")
		sys.exit(2)

	try:
		for opt, arg in opts:
			if opt == '-H':
				HOSTNAME = arg
			elif opt == '-S':
				SERVICEDESC = arg
			elif opt == '-f':
				FRESHNESS = arg
			elif opt == '-d':
				DIRNAME = arg
			else:
				print("Error: Unhandled option")
				print("Type " + sys.argv[0] + " --help to print help")
				sys.exit(2)

		EXIT_CODE = readfile(HOSTNAME, SERVICEDESC, FRESHNESS, DIRNAME)
		sys.exit(int(EXIT_CODE))
	except NameError:
		print("Error: Some of the options were not defined")
		print("Type " + sys.argv[0] + " --help to print help")
		sys.exit(2)

if __name__ == '__main__':
	# DEFAULT VALUES
	DIRNAME = '/opt/monitor/var/output'
	FRESHNESS = 5
	DEFAULT_VALS = [DIRNAME, FRESHNESS]

	if len(sys.argv) == 1 or sys.argv[1] == '-h' or sys.argv[1] == '--help':
		print_help(DEFAULT_VALS)

	if '-s' in sys.argv:
		printing(DIRNAME)
	else:
		reading(DIRNAME, FRESHNESS)
